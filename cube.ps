
cbuffer PerCameraCb : register(b1)
{
	// World To Camera space
	float4x4 _ViewMatrix;
	// World To Viewport
	float4x4 _ViewAndProjectionMatrix;
	float3 _Light1Pos;
	float _Light1Intensity;
};

struct SMaterial
{
	float _DiffuseStrength;
	float _SpecularStrength;
	float _AmbientStrength;
	// Large specular power means small specular highlight
	int _SpecularPower; // "phong exponent"
};

cbuffer PerObjectCb : register(b2)
{
	// Local To World
	float4x4 _WorldMatrix;
	// Local To World for normals
	float4x4 _NormalWorldMatrix;
	SMaterial _Material;
}

struct SPsInput
{
	float4 _S_Position : SV_POSITION;
	float3 _C_Position : POSITION;
	float3 _C_Normal : NORMAL;
	float4 _Color : COLOR;
};

// Blinn-Phong reflection
float4 CubePixelShader(SPsInput Input) : SV_TARGET
{
	if (_Light1Intensity <= 0)
	{
		return float4(1.0f, 0.0f, 0.5f, 1.0f);
	}
	
	float3 C_VecToLight = _Light1Pos - Input._C_Position;
	float3 C_VecToCam = -Input._C_Position;
	
	float3 n = normalize(Input._C_Normal); //interpolation might have caused it to be not normal?
	float3 l = normalize(C_VecToLight);
	float3 c = normalize(C_VecToCam);
	
	float3 DiffuseColor = _Material._DiffuseStrength * _Light1Intensity * Input._Color.xyz * saturate(dot(n, l));
	
	float3 SpecularColor;
	{
		float3 HighlightColor = float3(1.0f, 1.0f, 1.0f); // useing white highlight instead of object's color
		// h is the (unit) vector between l and c
		float3 h = normalize(l + c);
		float SpecularCosAngle = saturate(dot(n, h));
		SpecularColor = _Material._SpecularStrength * _Light1Intensity * HighlightColor * pow(SpecularCosAngle, _Material._SpecularPower);
	}
		
	float3 AmbientColor = _Material._AmbientStrength * Input._Color.xyz;
	
	float Attenuation;
	{
		float DistToLightSq = dot(C_VecToLight, C_VecToLight);
		float AttenuationFactor = 0.02f;
		Attenuation = 1.0f / (1.0f + AttenuationFactor * DistToLightSq);
	}
	
	float3 CombinedColor = AmbientColor + Attenuation * (DiffuseColor + SpecularColor);
	
	float3 GammeExp = float3(1.0f, 1.0f, 1.0f) / 2.2f;
	float3 GammaCorrectedColor = pow(CombinedColor, GammeExp);
	
	return float4(saturate(GammaCorrectedColor), 1.0f);
}
