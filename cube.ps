
cbuffer PerCameraCb : register(b1)
{
	// World To Camera space
	float4x4 _ViewMatrix;
	// World To Viewport
	float4x4 _ViewAndProjectionMatrix;
	float3 _Light1Pos;
	float _HasLight1; //used as bool
};

struct SPsInput
{
	float4 _S_Position : SV_POSITION;
	float3 _C_Position : POSITION;
	float3 _C_Normal : NORMAL;
	float4 _Color : COLOR;
};


float4 CubePixelShader(SPsInput Input) : SV_TARGET
{
	float3 C_DirToLight = normalize(_Light1Pos - Input._C_Position);
	float LightCosAngle = dot(Input._C_Normal, C_DirToLight);
	
	LightCosAngle = clamp(LightCosAngle, 0.0f, 1.0f);
	return Input._Color * LightCosAngle;
}
